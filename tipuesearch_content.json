{"pages":[{"url":"https://stormlab.eu/the-night-angel-trilogy.html","text":"I really enjoy reading, especially Fantasy. I'm just writing down what books I've enjoyed and why without spoiling too much. This is the last trigoly I've read : The Night Angel. I wasn't sure what it was about but that was a pleasant surprise. I was a bit short on books in my Kindle on my way home so I took the bet. It was rough, dark, but at the same time a bit childish mostly because of some characters attitude. Full of action, violence and deceptive romance.. the ending wasn't to my taste but that's just me. My first time reading books from Brent Weeks, maybe I'll try the second trilogy he is working on (Lightbringer series). Anyway, if you're into plop twist, immortals, magic, assassins, depravity, sexual tension, a bit of gore on the side.. this trilogy is for you. Once you start you just want to keep reading, the story is unfolding slowly and you keep wondering what the heck is going on.. The author likes to drop massive bombs (aka plop twist) that almost always hit home. The Night Angel Trilogy: The Way of Shadows (2008) Shadow's Edge (2008) Beyond the Shadows (2008) Since I'm french and might look for those books in the future, I'll keep the french name of those books in this article (yes I'm lazy): La Voie des ombres, Bragelonne (2009) Le Choix des ombres, Bragelonne (2009) Au-delÃ  des ombres, Bragelonne (2009) Brent Weeks Wikipedia page","tags":"Books","title":"The Night Angel Trilogy"},{"url":"https://stormlab.eu/flask-with-gunicorn-getting-started.html","text":"This article will quickly explain how to serve your Flask app with gunicorn and Lighttpd. I already had Lighttpd running on my raspberry pi serving basic html/php files and configured as a proxy to other services. The idea was to plug in a simple Flask app and this is what I will be explaining in this article. Install Flask and Gunicorn First, we need to install Flask with pip. If you are not familiar with using pip , please read pip documentation before going forward. pip install flask Gunicorn can be installed on debian wheezy through the repository, or you can install it with pip too. sudo apt-get install gunicorn Gunicorn will quickly allow us to run an HTTP server hosting our Flask app. Building a simple Flask app The easiest way to build a simple Flask app is to use the code available on the official Flask website . First let's create our projet folder and the Flask python file: mkdir ~/flask-gunicorn cd ~/flask-gunicorn vi flask.py This is the source code we will be using (the almighty 'Hello World!') from flask import Flask app = Flask ( __name__ ) @app.route ( \"/flask\" ) def hello (): return \"Hello World!\" if __name__ == \"__main__\" : app . run () At this point, notice that our file is named flask.py and our app is called app . You can test this simple app by executing: python flask.py ( Ctrl + c ) to cancel Configure Gunicorn Gunicorn will allow us to serve our project using multiple workers. The best approach for running it as a service is to use a config file: vi gunicorn-cfg.py The config file used is a simple python file: import multiprocessing bind = \"127.0.0.1:8000\" workers = multiprocessing . cpu_count () * 2 + 1 pidfile = 'gunicorn_pid' daemon = True accesslog = 'gunicorn_access.log' errorlog = 'gunicorn_error.log' loglevel = 'debug' bind : which interface and which port are used for binding. workers : number of workers to run. pidfile : easier to kill process when you need to restart gunicorn to commit changes to your Flask app. daemon : run Gunicorn as a daemon. accesslog : log what has been accessed. errorlog : log errors related to gunicorn daemon status. loglevel : debug while developping is always a plus. Once the config file is ready, you can start Gunicorn: gunicorn -c gunicorn-cfg.py flask:app Let's quickly explain this command: The first argument is used to declare a config file flask:app means filename:flask_app_name In case you need to restart Gunicorn, just kill the process with the following command and start again: kill ` cat gunicorn_pid ` gunicorn -c gunicorn-cfg.py flask:app At this point, your Flask app is running with Gunicorn as a daemon. You should be able to see your Hello world!: curl http://127.0.0.1:8000/flask We're still not satisfied since using port 8000 is clearly not the best. Let's take a look at our Lighttpd configuration. Configure Lighttpd In this paragraph I'm assuming you know how to install, run and configure Lighttpd. Let's edit the configuration file: sudo vi /etc/lighttpd/lighttpd.conf We need to declare the Gunicorn service running on 127.0.0.1:8000 and map it to a path (we're not using the root directory since we assume Lighttpd is already serving something else) $HTTP [ \"url\" ] = ~ \"&#94;/flask( $| /)\" { proxy.server = ( \"\" = > ( ( \"host\" = > \"127.0.0.1\" , \"port\" = > 8000 ) ) ) } Save it and restart Lighttpd: sudo service lighttpd restart You should now be able to see your Hello World! at this url: curl http://127.0.0.1/flask","tags":"Python","title":"Flask with Gunicorn - Getting started"}]}